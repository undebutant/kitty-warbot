;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Le code de l'equipe Gonthier / Trailin
;; Préfixe : chatons
;;
;; mem0 et mem1 : coordonnees d'une cible
;; mem5 : indique si le robot a ou non une cible sélectionnée
;; mem4 : indique si un harvester est en mode retour à la base
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to chatons-ask-for-energy [ b n ]
  ask b [ if (energy > 1000) [ give-energy myself n ]]
end

;;
;; Rentre à la base si le robot transporte plus de 600 unités de nourriture, si son énergie est inférieure à 800 ou si c'est un rocket-launcher qui n'a plus de missiles / fafs
;;
to chatons-go-back-to-base
  ;; Détermine la base la plus proche
  let b min-one-of my-bases [ distance myself ]
  ;; Bug corrigé
  if (b != nobody) [
    ;; Si le robot est arrivé à la base
    ifelse (distance b <= 2)
      [ 
        ;; Il dépose sa nourriture
        give-food b carrying-food?
        ;; Il demande de l'énergie (indiféremment du type du robot) s'il reste moins de 1000 dans ses stocks
        if (energy < 1000) [ chatons-ask-for-energy b 400 ]
        ;; Si c'est un explorer, il gagne 400 d'énergie en plus (total de 800)
        if (Breed = Explorers) [ chatons-ask-for-energy b 400 ]
        ;; Si c'est un rocket launcher, il gagne 800 d'énergie en plus (total de 1200), et récupère 42 missiles et 4 fafs selon les stocks qu'il lui reste
        if (Breed = RocketLaunchers) [
          chatons-ask-for-energy b 800
          if (nb-missiles < 10) [new-missile 42]
          if (nb-fafs < 2) [new-faf 4]
        ]
        set mem4 0
        ;; Fait demi-tour
        rt 180
      ]
    ;; Sinon
      [
        ;; S'oriente vers la base avec un peu d'aléatoire
        set heading towards b - 20 + random 40
        ;; Fait un demi tour si il y a du monde devant
        ifelse (free-ahead? speed = nobody)  [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
    ]    
end

to chatons-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to chatons-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance myself ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
  ]
  [
    ifelse (mem5 = 1)
    [ 
      ifelse (distancexy mem0 mem1 > 1)
      [
        set heading towardsxy mem0 mem1
        ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
      [ set mem5 0 ]
    ]
    [ random-move ]
  ]
end

;;
;; La mémoire mem5 est à
;; - 0 si le robot n'a pas de cible sélectionnée
;; - 1 si le robot a une cible sélectionnée
;;
to-report chatons-no-target?
  report mem5 = 0
end

to chatons-set-target-xy [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to chatons-set-target-t [ t espece ]
  set mem0 t set mem2 espece set mem5 2
end

to chatons-set-food-target [ x y ]
  if (chatons-no-target?) [ set mem0 x set mem1 y set mem5 1 ] 
end

to chatons-call-rocket-launcher-xy [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ chatons-set-target-xy x y espece ]]
end

to chatons-call-rocket-launcher-t [ t espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distance t ]
  if (rl != nobody) [ ask rl [ chatons-set-target-t t espece ]]
end

to chatons-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [ chatons-set-target-xy x y espece ]
  ]
end

to chatons-call-harvester [ x y ]
  let h min-one-of perceive-specific-robots color harvesters [ distancexy x y ]
  if (h != nobody) [ ask h [ chatons-set-food-target x y ]]
end

;;
;; Essaie de sélectionner une cible à viser
;;
to chatons-select-target
  ;; Si le robot n'a pas une base adverse comme cible
  if (chatons-no-target?)
  [
    ;; Il essaie de percevoir un robot ennemi (le plus proche de lui)
    let h min-one-of perceive-robots2 ennemy1 ennemy2 [ distance myself ]
    ;; S'il en a vu un, il mémorise ses coordonnées et vérouille la cible
    ifelse ( h != nobody ) [
      set mem0 h
      set mem2 [breed] of h
      set mem5 2
    ]
    ;; Sinon, il se déverouille
    [ set mem5 0 ]
  ]
end

to chatons-shoot 
  if (not chatons-no-target?)
  [
    ifelse (mem5 = 1)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0 ]
    [ launch-faf mem0 set mem5 0 ]
  ]
  
end

to chatons-drive-harvesters
  let food one-of perceive-food
  if (food != nobody) [
    chatons-call-harvester [xcor] of food [ycor] of food 
  ]
end

to goGreenExplorer
  ifelse (energy < 800)
  [ chatons-go-back-to-base ]
  [ chatons-go-and-eat ]
  
  chatons-drive-harvesters

  ifelse (not chatons-no-target?) [
    chatons-call-rocket-launcher-xy mem0 mem1 mem2
    chatons-call-explorer mem0 mem1 mem2
  ]
  [ let h one-of perceive-robots2 ennemy1 ennemy2
    if ( h != nobody ) [ chatons-call-rocket-launcher-t h [breed] of h]
  ]
end

to goGreenRocketLauncher
  ;; On prend en compte l'énergie, le nombre de missiles et le nombre de fafs restants
  ifelse (energy < 800) or ((nb-missiles < 10) or (nb-fafs < 2))
  [
    ;; Rentre à la base si ces conditions sont vérifiées
    chatons-go-back-to-base
  ]
  [
    ;; Sinon, sélectionne une cible
    chatons-select-target
    ifelse (chatons-no-target?)
    ;; Si pas de cible, se promène
    [ chatons-go-and-eat ]
    ;; Sinon tire
    [ chatons-shoot ]
  ]
  
  ;; Créé un nouveau faf si il a plus de 2000 unités d'énergies
  if ((energy > 2000) and (nb-fafs < 5)) [ new-faf 1 ]
end

to goGreenHarvester
  ifelse (mem4 = 1) or (carrying-food? > 600) or (energy < 800)
  [
    ;; Retour à la base
    set mem4 1
    ;; Rentre à la base si les conditions sont vérifiées
    chatons-go-back-to-base
    if (energy > 800) and (carrying-food? > 600) [ 
      ;; Détermine la distance de la base la plus proche
      ;; Bug corrigé
      let b min-one-of my-bases [ distance myself ]
      if (b != nobody) [
        ;; Si le robot est à moins de 15 unités de distance de la base
        if (distance b < 15)
          [ plant-seeds color max-seeds ]
      ]
    ]
  ]
  [
    ;; Cherche à manger
    chatons-harvesters-go-and-eat
  ]
end

to goGreenBase
  set label energy
  ;; Création de fafs en priorité, quand on a de l'énergie en réserve
  if (nb-fafs < 20) and (energy > 4000) [ new-faf 42 ]
  ;; Création ensuite de missiles quand on a encore de l'énergie en réserve
  if (nb-missiles < 100) and (energy > 6000) [ new-missile 84 ]
  ;; On créé un nouveau robot dans le cas où il nous reste encore assez d'énergie après la création d'armes
  ifelse (energy > 8000) [
    ;; On refait le compte des unités nous appartenant
    let nbExplorer count Explorers with [color = [color] of myself]
    let nbHarvester count Harvesters with [color = [color] of myself]
    let nbRocketLauncher count RocketLaunchers with [color = [color] of myself]
    let nbTotal nbExplorer + nbHarvester + nbRocketLauncher
    
    ;; On regarde la proportion d'explorers
    ifelse(8 * nbExplorer < nbTotal) ;; Afin d'avoir au moins 1/8 d'explorers
    [new-Explorer 1 self]
    [
      ;; De même pour les harvesters
      ifelse(nbHarvester * 10 < nbTotal * 6) ;; Afin d'avoir au moins 6/10 de harvesters
      [new-Harvester 1 self]
      [
        ;; Sinon, on fait un rocket launcher
        new-RocketLauncher 1 self
      ]
    ]
  ]
  [
    ;; On veut cependant s'assurer un minimum de rentrée de ressources
    let nbHarvester count Harvesters with [color = [color] of myself]
    if(nbHarvester < 10) ;; Afin d'avoir au moins 10 harvesters
    [new-Harvester 1 self]
  ]
  
  let t one-of perceive-specific-robots2 ennemy1 ennemy2 rocketlaunchers
    if (t != nobody) [
      launch-rocket towards t
    ]
end

;; Procédure pour initialiser les explorers verts
to initGreenExplorer
end

;; Procédure pour initialiser les rocket-launchers verts
to initGreenRocketLauncher
end

;; Procédure pour initialiser les harvesters verts
to initGreenHarvester
end

;; Procédure pour initialiser les bases verts
to initGreenBase
  ;; créé des explorers, des harvesters et des rocket-launchers
  new-Explorer 2 self
  new-Harvester 5 self
  new-RocketLauncher 2 self
end
